# =============================================================
# Grupo: Adriano Lucas, Emmanuel Nascimento, Renato Barbosa e Vin�cius Marques
# Atividade: Projeto 1VA
# Disciplina: Arquitetura e Organiza��o de Computadores
# Semestre Letivo: 4o
# Descri��o:
# Sistema de gerenciamento de condom�nio com cadastro de moradores e ve�culos.
# O sistema � operado por um shell de comandos que permite adicionar/remover moradores e ve�culos,
# limpar apartamentos, exibir informa��es e salvar/recarregar dados em arquivo.
# =============================================================

# =============================================================
# 	      PROGRAMA PRINCIPAL (SHELL DO CONDOM�NIO)
# =============================================================

.data

# =============================================================
# 		       ESTRUTURA DE DADOS
# =============================================================
banner: .asciiz "CND-shell>> "     	# Texto do SHELL 
buffer: .align 2			# Alinha o próximo endereço para múltiplo de 4
	.space 100                 	# Reserva espa�o para leitura de comando
tokens: .space 100			# Buffer para tokens
token_count: .word 0			# Contador de Tokens

# ============================================================
# 		  Mapeamento dos Apartamentos
# =============================================================

ap_map: .word 101,102,103,104,201,202,203,204,301,302,303,304,401,402,403,404
	.word 501,502,503,504,601,602,603,604,701,702,703,704,801,802,803,804
	.word 901,902,903,904,1001,1002,1003,1004 # 40 Apartamentos

# =============================================================
# 			Armazenamento
# =============================================================

# ===============================
#         Para Moradores:
# ===============================
ap_status: .space 40			# 0 = vazio, 1 = ocupado
moradores: .space 6000             	# 40 Apartamentos * 5 Moradores * 30 chars
qtd_moradores: .space 40           	# N�mero de moradores por AP

# ===============================
#         Para Ve�culos:
# ===============================

tipo_veiculo: .space 40     		# 0 = Nada, 1 = carro, 2 = Moto 1, 3 = motos 2
modelo_carro: .space 800    		# 40 * 20, Suporte a 20 bytes por modelo
cor_carro: .space 600       		# 40 * 15, Suporte a 15 bytes por modelo

modelo_moto1: .space 800    		# 40 * 20, Suporte a 20 bytes por modelo
cor_moto1: .space 600       		# 40 * 15, Suporte a 15 bytes por modelo

modelo_moto2: .space 800    		# 40 * 20, Suporte a 20 bytes por modelo
cor_moto2: .space 600       		# 40 * 15, Suporte a 15 bytes por modelo

# Strings para comparação de veículos
str_carro: .asciiz "carro"
str_moto:  .asciiz "moto"


# ===============================
#     Arquivo de Persist�ncia
# ===============================
file_name: .asciiz "condominio.dat"	# Nome do arquivo para salvar
file_buffer: .space 15000		# Quantidade de espa�o para esse arquivo (+ ou - 13000), 15000 para garantia


# ===============================
#            Erros
# ===============================
err_invalid_cmd:    .asciiz "Comando invalido\n"
err_ap_invalid:     .asciiz "Falha: AP invalido\n"
err_ap_full_res:    .asciiz "Falha: AP com numero max de moradores\n"
err_res_not_found:  .asciiz "Falha: morador nao encontrado\n"
err_ap_full_veh:    .asciiz "Falha: AP com numero max de automoveis\n"
err_invalid_type:   .asciiz "Falha: tipo invalido\n"
err_veh_not_found:  .asciiz "Falha: automovel nao encontrado\n"
info_ap_empty:      .asciiz "Apartamento vazio\n"

# ===============================
#      Strings para info_ap
# ===============================
info_ap_header:     .asciiz "AP: "
info_residents:     .asciiz "Moradores:\n"
info_car:           .asciiz "Carro:\n\tModelo: "
info_motorcycle:    .asciiz "Moto:\n\tModelo: "
info_color:         .asciiz "\n\tCor: "

# ===============================
#      Strings para info_geral
# ===============================
info_general_non_empty: .asciiz "Nao vazios:\t"
info_general_empty:     .asciiz "Vazios:\t\t"
info_general_percent:   .asciiz "%\n"
info_general_total:     .asciiz "Total de apartamentos: 40\n"

# ===============================
#      Mensagens de Sucesso
# ===============================
success_add_res:    .asciiz "Morador adicionado com sucesso\n"
success_rem_res:    .asciiz "Morador removido com sucesso\n"
success_add_veh:    .asciiz "Veiculo adicionado com sucesso\n"
success_rem_veh:    .asciiz "Veiculo removido com sucesso\n"
success_clr_ap:     .asciiz "Apartamento limpo com sucesso\n"
success_save:       .asciiz "Dados salvos com sucesso\n"
success_load:       .asciiz "Dados carregados com sucesso\n"
success_format:     .asciiz "Sistema formatado com sucesso\n"

# ===============================
#     	    Comandos
# ===============================


# Comando exit
exit_cmd: .asciiz "exit"

# Mensagens de comando (corrigidas para .asciiz)
msg_ad_morador: .asciiz "ad_morador"
msg_rm_morador: .asciiz "rm_morador"
msg_ad_auto: .asciiz "ad_auto"
msg_rm_auto: .asciiz "rm_auto"
msg_limpar_ap: .asciiz "limpar_ap"
msg_info_ap: .asciiz "info_ap"
msg_info_geral: .asciiz "info_geral"
msg_salvar: .asciiz "salvar"
msg_recarregar: .asciiz "recarregar"
msg_formatar: .asciiz "formatar"

debug_msg: .asciiz "\nDEBUG: Comparando com comandos...\n"

# =============================================================
# 			C�DIGO PRINCIPAL
# =============================================================

.text
.globl main

main:
	jal load_from_file	# Carrega dados ao Iniciar
main_loop:
    # Exibe banner
    li $v0, 4
    la $a0, banner
    syscall
    
    # L� comando
    li $v0, 8
    la $a0, buffer
    li $a1, 100
    syscall
    
    # Remove newline do buffer
    jal remove_newline
    
    # Processa comando
    jal parse_command
    
    # Sempre volta para o loop principal
    j main_loop

    # Fim do programa (nunca alcançado)
    li $v0, 10
    syscall

# =============================================================
# 		     FUN��ES DE COMANDOS
# =============================================================

# Função para remover newline do final da string
remove_newline:
    la $t0, buffer
loop_remove_nl:
    lb $t1, 0($t0)
    beq $t1, '\n', found_nl
    beqz $t1, done_remove_nl
    addi $t0, $t0, 1
    j loop_remove_nl
found_nl:
    sb $zero, 0($t0)  # Substitui \n por \0
done_remove_nl:
    jr $ra

# ======================================
# Fun��o: parse_command
# Descri��o: Divide o comando em tokens e chama fun��o correspondente
# ======================================
parse_command:
    # Salva registradores na pilha
    addi $sp, $sp, -12
    sw $ra, 0($sp)
    sw $s0, 4($sp)
    sw $s1, 8($sp)

    # Tokeniza o comando do buffer
    la $a0, buffer
    jal tokenize           # Chama função para tokenizar o input
    lw $s1, token_count   # Carrega quantidade de tokens
    la $s0, tokens        # Carrega endereço do array de tokens

    # Se não há tokens, finaliza
    beqz $s1, parse_done

    # Verifica cada comando possível
    lw $a0, 0($s0)        # Carrega primeiro token
    
    # Comando: exit
    la $a1, exit_cmd
    jal strcmp
    beqz $v0, exit_program

    # Comando: ad_morador
    la $a1, msg_ad_morador
    jal strcmp
    beqz $v0, cmd_ad_morador_handler

    # Comando: rm_morador
    la $a1, msg_rm_morador
    jal strcmp
    beqz $v0, cmd_rm_morador_handler

    # Comando: ad_auto
    la $a1, msg_ad_auto
    jal strcmp
    beqz $v0, cmd_ad_auto_handler

    # Comando: rm_auto
    la $a1, msg_rm_auto
    jal strcmp
    beqz $v0, cmd_rm_auto_handler

    # Comando: limpar_ap
    la $a1, msg_limpar_ap
    jal strcmp
    beqz $v0, cmd_limpar_ap_handler

    # Comando: info_ap
    la $a1, msg_info_ap
    jal strcmp
    beqz $v0, cmd_info_ap_handler

    # Comando: info_geral
    la $a1, msg_info_geral
    jal strcmp
    beqz $v0, cmd_info_geral_handler

    # Comando: salvar
    la $a1, msg_salvar
    jal strcmp
    beqz $v0, cmd_salvar_handler

    # Comando: recarregar
    la $a1, msg_recarregar
    jal strcmp
    beqz $v0, cmd_recarregar_handler

    # Comando: formatar
    la $a1, msg_formatar
    jal strcmp
    beqz $v0, cmd_formatar_handler

    # Comando não reconhecido
    j invalid_cmd

cmd_ad_morador_handler:
    # Verifica quantidade de tokens (3: comando, ap, nome)
    li $t0, 3
    bne $s1, $t0, invalid_args
    
    # Obtém índice do apartamento
    lw $a0, 4($s0)       # Segundo token (apartamento)
    jal get_ap_index
    bltz $v0, invalid_ap  # Índice inválido
    
    # Prepara argumentos para função
    move $a0, $v0        # Índice do apartamento
    lw $a1, 8($s0)       # Terceiro token (nome)
    jal cmd_add_morador   # Chama função de adição
    j parse_done

cmd_rm_morador_handler:
    # Verifica quantidade de tokens (3: comando, ap, nome)
    li $t0, 3
    bne $s1, $t0, invalid_args
    
    # Obtém índice do apartamento
    lw $a0, 4($s0)       # Segundo token (apartamento)
    jal get_ap_index
    bltz $v0, invalid_ap  # Índice inválido
    
    # Prepara argumentos para função
    move $a0, $v0        # Índice do apartamento
    lw $a1, 8($s0)       # Terceiro token (nome)
    jal cmd_rem_morador   # Chama função de remoção
    j parse_done

cmd_ad_auto_handler:
    # Verifica quantidade de tokens (5: comando, ap, tipo, modelo, cor)
    li $t0, 5
    bne $s1, $t0, invalid_args
    
    # Obtém índice do apartamento
    lw $a0, 4($s0)       # Segundo token (apartamento)
    jal get_ap_index
    bltz $v0, invalid_ap  # Índice inválido
    move $t2, $v0        # Salva índice
    
    # Verifica tipo de veículo
    lw $a0, 8($s0)       # Terceiro token (tipo)
    la $a1, str_carro
    jal strcmp
    beqz $v0, ad_auto_carro
    
    la $a1, str_moto
    jal strcmp
    beqz $v0, ad_auto_moto
    
    j invalid_type       # Tipo inválido

ad_auto_carro:
    li $t3, 1            # Código para carro
    j ad_auto_continue

ad_auto_moto:
    li $t3, 2            # Código para moto

ad_auto_continue:
    # Prepara argumentos
    move $a0, $t2        # Índice do apartamento
    move $a1, $t3        # Tipo de veículo
    lw $a2, 12($s0)      # Quarto token (modelo)
    lw $a3, 16($s0)      # Quinto token (cor)
    jal cmd_add_automovel
    j parse_done

cmd_rm_auto_handler:
    # Verifica quantidade de tokens (3: comando, ap, tipo)
    li $t0, 3
    bne $s1, $t0, invalid_args
    
    # Obtém índice do apartamento
    lw $a0, 4($s0)       # Segundo token (apartamento)
    jal get_ap_index
    bltz $v0, invalid_ap  # Índice inválido
    move $t2, $v0        # Salva índice
    
    # Verifica tipo de veículo
    lw $a0, 8($s0)       # Terceiro token (tipo)
    la $a1, str_carro
    jal strcmp
    beqz $v0, rm_auto_carro
    
    la $a1, str_moto
    jal strcmp
    beqz $v0, rm_auto_moto
    
    j invalid_type       # Tipo inválido

rm_auto_carro:
    li $t3, 1            # Código para carro
    j rm_auto_continue

rm_auto_moto:
    li $t3, 2            # Código para moto

rm_auto_continue:
    # Prepara argumentos
    move $a0, $t2        # Índice do apartamento
    move $a1, $t3        # Tipo de veículo
    jal cmd_rem_automovel
    j parse_done

cmd_limpar_ap_handler:
    # Verifica quantidade de tokens (2: comando, ap)
    li $t0, 2
    bne $s1, $t0, invalid_args
    
    # Obtém índice do apartamento
    lw $a0, 4($s0)       # Segundo token (apartamento)
    jal get_ap_index
    bltz $v0, invalid_ap  # Índice inválido
    
    move $a0, $v0        # Índice do apartamento
    jal cmd_clr_apartamento
    j parse_done

cmd_info_ap_handler:
    # Verifica quantidade de tokens (2: comando, ap)
    li $t0, 2
    bne $s1, $t0, invalid_args
    
    # Obtém índice do apartamento
    lw $a0, 4($s0)       # Segundo token (apartamento)
    jal get_ap_index
    bltz $v0, invalid_ap  # Índice inválido
    
    move $a0, $v0        # Índice do apartamento
    jal cmd_info_apartamento
    j parse_done

# Handlers para comandos sem argumentos
cmd_info_geral_handler:
cmd_salvar_handler:
cmd_recarregar_handler:
cmd_formatar_handler:
    # Verifica se tem apenas 1 token
    li $t0, 1
    bne $s1, $t0, invalid_args
    
    # Determina qual comando chamar
    lw $a0, 0($s0)        # Recarrega primeiro token
    
    # Comando: info_geral
    la $a1, msg_info_geral
    jal strcmp
    beqz $v0, call_info_geral
    
    # Comando: salvar
    la $a1, msg_salvar
    jal strcmp
    beqz $v0, call_salvar
    
    # Comando: recarregar
    la $a1, msg_recarregar
    jal strcmp
    beqz $v0, call_recarregar
    
    # Comando: formatar
    la $a1, msg_formatar
    jal strcmp
    beqz $v0, call_formatar
    
    j invalid_cmd

call_info_geral:
    jal cmd_info_geral
    j parse_done

call_salvar:
    jal cmd_salvar
    j parse_done

call_recarregar:
    jal cmd_recarregar
    j parse_done

call_formatar:
    jal cmd_formatar
    j parse_done

# Tratamento de erros
invalid_args:
invalid_cmd:
    la $a0, err_invalid_cmd
    li $v0, 4
    syscall
    j parse_done

invalid_ap:
    la $a0, err_ap_invalid
    li $v0, 4
    syscall
    j parse_done

invalid_type:
    la $a0, err_invalid_type
    li $v0, 4
    syscall
    j parse_done

exit_program:
    li $v0, 10
    syscall

parse_done:
    # Restaura registradores
    lw $ra, 0($sp)
    lw $s0, 4($sp)
    lw $s1, 8($sp)
    addi $sp, $sp, 12
    jr $ra
    
    
# ======================================
# Fun��o: str_to_int
# Descri��o: Converte string para inteiro
# Entrada: $a0 = endere�o da string
# Sa�da: $v0 = valor inteiro (-1 se inv�lido)
# ======================================
str_to_int:
    	# Inicializa��es
    	li $v0, 0              # Inicializa resultado
    	li $t1, 10             # Base decimal
    	li $t4, 0              # Flag de d�gito v�lido (0 = nenhum d�gito)
    
    	# Carrega primeiro caractere
    	lb $t0, 0($a0)
   	beqz $t0, stoi_error   # String vazia: erro
    
stoi_loop:
    	lb $t0, 0($a0)         # Carrega caractere
    	beqz $t0, stoi_done    # Fim da string: termina
    
    	# Verifica se � d�gito
    	blt $t0, '0', stoi_error
    	bgt $t0, '9', stoi_error
    
    	li $t4, 1              # Marca que pelo menos um d�gito v�lido foi encontrado
    	sub $t0, $t0, '0'      # Converte char para int
    
    	# resultado = resultado * 10 + d�gito
    	mul $v0, $v0, $t1
    	add $v0, $v0, $t0
    
    	addi $a0, $a0, 1       # Pr�ximo caractere
    	j stoi_loop

stoi_error:
    	# Se nenhum d�gito v�lido foi encontrado, retorna erro
    	beqz $t4, stoi_invalid
    
    	# Se alguns d�gitos foram v�lidos mas encontrou caractere inv�lido, ainda � erro
stoi_invalid:
    	li $v0, -1             # Retorna -1 para erro

stoi_done:
    	# Se passou pelo loop mas n�o encontrou d�gitos v�lidos
    	beqz $t4, stoi_invalid
    	jr $ra

# ========================================
# Fun��o: tokenize
# Entrada: $a0 = endere�o do buffer de comando
# Sa�da: Preenche array de tokens e token_count
# ========================================

tokenize:
    la $t0, tokens
    li $t1, 0           # Contador de tokens
    move $t2, $a0       # Ponteiro no buffer
    
token_loop:
    lb $t3, 0($t2)
    beqz $t3, token_done
    beq $t3, '\n', token_done
    beq $t3, '-', next_token
    
    # Armazena início do token (usando sw com alinhamento garantido)
    sw $t2, 0($t0)      # Armazena o endereço do token
    
find_end:
    addi $t2, $t2, 1
    lb $t3, 0($t2)
    beqz $t3, end_token
    beq $t3, '\n', end_token
    beq $t3, '-', end_token
    j find_end

end_token:
    # Substitui delimitador por null
    sb $zero, 0($t2)
    addi $t0, $t0, 4    # Próximo slot de token (avança 4 bytes)
    addi $t1, $t1, 1    # Incrementa contador
    addi $t2, $t2, 1    # Próximo caractere
    j token_loop

next_token:
    addi $t2, $t2, 1
    j token_loop

token_done:
    # Armazena contador com alinhamento garantido
    sw $t1, token_count
    jr $ra
# ======================================
# Fun��o: get_ap_index
# Descri��o: Este comando verifica qual apartamento est� sendo utilizado.
# Entrada: $a0 = string com n�mero do AP
# Sa�da: $v0 = �ndice (0-39) ou -1 se inv�lido
# ======================================
get_ap_index:
    	# Converte string para inteiro
    	jal str_to_int
    	move $t0, $v0
    
    	# Procura no ap_map
    	la $t1, ap_map
    	li $t2, 0
    
search_loop:
    	lw $t3, 0($t1)
    	beq $t3, $t0, found
    	addi $t1, $t1, 4
    	addi $t2, $t2, 1
   	 blt $t2, 40, search_loop
    	
    	# N�o encontrado
    	li $v0, -1
    	jr $ra
    
found:
    	move $v0, $t2
    	jr $ra

# ======================================
# Fun��o: cmd_add_morador
# Descri��o: Este comando adiciona um morador a um apartamento especificado
# Comando: ad_morador-<option1>-<option2>
# ======================================
cmd_add_morador:
    	# 1. Pegar Apartamento com get_ap_index
    	# 2. Verificar limite de moradores
    	# 3. Adicionar morador
    	# 4. Atualizar ap_status se necess�rio
    	jr $ra

# ======================================
# Fun��o: cmd_rem_morador
# Descri��o: Este comando Remove um morador a um apartamento especificado
# Comando: rm_morador-<option1>-<option2>
# ======================================
cmd_rem_morador:
	# 1. Pegar Apartamento com get_ap_index
    	# 2. Verificar limite de moradores
    	# 3. remover morador
    	# 4. Atualizar ap_status se necess�rio
	jr $ra
	
# ======================================
# Fun��o: cmd_add_automovel
# Descri��o: Este comando adiciona um autom�vel a um apartamento especificado
# Comando: ad_auto-<option1>-<option2>-<option3>-<option4>
# ======================================
cmd_add_automovel:
	# 1. Pegar Apartamento com get_ap_index
    	# 2. Verificar limite de autom�veis
    	# 3. adicionar autom�vel
    	# 4. Atualizar tipo_veiculo se necess�rio
	jr $ra

# ======================================
# Fun��o: cmd_rem_automovel
# Descri��o: Este comando remove um autom�vel a um apartamento especificado
# Comando: rm_auto-<option1>-<option2>-<option3>-<option4>
# ======================================
cmd_rem_automovel:
	# 1. Pegar Apartamento com get_ap_index
    	# 2. Verificar limite de autom�veis
    	# 3. remover autom�vel
    	# 4. Atualizar tipo_veiculo se necess�rio
	jr $ra

# ======================================
# Fun��o: cmd_clr_apartamento
# Descri��o: Este comando limpa tudo de um apartamento especificado
# Comando: limpar_ap-<option1>
# ======================================

cmd_clr_apartamento:
	# 1. Pegar Apartamento com get_ap_index
	# 2. limpar tudo
	# 3. atualizar ap_status se necess�rio
	jr $ra
	
# ======================================
# Fun��o: md_info_apartamento
# Descri��o: Este comando mostra informa��es de um apartamento especificado
# Comando: info_ap-<option1>
# ======================================
cmd_info_apartamento:
	
	jr $ra

# ======================================
# Fun��o: cmd_info_geral
# Descri��o: Este comando apresenta o panorama geral de apartamentos vazios e n�o vazios
# Comando: info_geral
# ======================================
cmd_info_geral:
    # Exemplo simples - mostra mensagem e volta
    li $v0, 4
    la $a0, info_general_total
    syscall
    jr $ra
	

# ======================================
#       Persist�ncia em Arquivo
# ======================================



# ======================================
# Fun��o: cmd_salvar
# Descri��o: Este comando salva tudo em "condominio.dat"
# Comando: salvar
# ======================================
cmd_salvar:
    # 1. Abrir arquivo para escrita
    # 2. Escrever estruturas de dados
    # 3. Fechar arquivo
    jr $ra


# ======================================
# Fun��o: cmd_recarregar
# Descri��o: Recarrega as informa��es salvas no arquivo externo na execu��o atual do programa. 
# Modifica��es n�o salvas ser�o perdidas e as informa��es salvas anteriormente recuperadas.  
# Comando: recarregar
# ======================================
cmd_recarregar:

	jr $ra

# ======================================
# Fun��o: cmd_formatar
# Descri��o: Apaga todas as informa��es da execu��o atual do programa,
# deixando todos os apartamentos vazios. Este comando n�o deve salvar automaticamente no arquivo externo,
# sendo necess�rio usar posteriormente o comando �salvar� para registrar a forma��o no arquivo externo.
# Comando: formatar
# ======================================
cmd_formatar:

	jr $ra

# ======================================
# Fun��o: load_from_file
# Descri��o: Este comando carrega os apartamentos (se tiver)  de "condominio.dat"
# ======================================
load_from_file:
    # 1. Abrir arquivo para leitura
    # 2. Verificar se existe
    # 3. Ler dados para estruturas
    # 4. Fechar arquivo
    jr $ra

# ======================================
# Fun��es de String (da Lista de Exerc�cio)
# ======================================

# ======================================
# Fun��o: strcpy = String Copy
# Descri��o: Copia string de origem para destino
# Par�metros:
#   $a0 - endere�o do destino
#   $a1 - endere�o da origem
# Retorno:
#   $v0 - endere�o original do destino
# ======================================
strcpy:
    move $t5, $a0       # Salva endere�o original do destino
    
strcpy_loop:
    lb $t0, 0($a1)      # Carrega byte da origem
    sb $t0, 0($t5)      # Armazena byte no destino
    beqz $t0, strcpy_done # Se byte for NULL, termina
    addi $t5, $t5, 1    # Avan�a ponteiro do destino
    addi $a1, $a1, 1    # Avan�a ponteiro da origem
    j strcpy_loop       # Repete o loop
    
strcpy_done:
    move $v0, $a0       # Retorna endere�o original do destino
    jr $ra              # Retorna ao chamador

# ======================================
# Fun��o: memcpy = Memory Copy
# Descri��o: Copia blocos de mem�ria
# Par�metros:
#   $a0 - endere�o do destino
#   $a1 - endere�o da origem
#   $a2 - n�mero de bytes a copiar
# Retorno:
#   $v0 - endere�o original do destino
# ======================================
memcpy:
    move $v0, $a0       # Salva endere�o original do destino
    move $t2, $a2       # Configura contador de bytes
    
memcpy_loop:
    beqz $t2, memcpy_done # Se contador = 0, termina
    lb $t0, 0($a1)      # Carrega byte da origem
    sb $t0, 0($a0)      # Armazena byte no destino
    addi $a0, $a0, 1    # Avan�a destino
    addi $a1, $a1, 1    # Avan�a origem
    addi $t2, $t2, -1   # Decrementa contador
    j memcpy_loop       # Repete o loop
    
memcpy_done:
    jr $ra              # Retorna ao chamador

# ======================================
# Fun��o: strcmp = String Comparator
# Descri��o: Compara duas strings
# Par�metros:
#   $a0 - endere�o da primeira string
#   $a1 - endere�o da segunda string
# Retorno:
#   $v0 - 0 (igual), negativo (str1 < str2), positivo (str1 > str2)
# ======================================
strcmp:
    # Implementação mais robusta
    move $t0, $a0
    move $t1, $a1
    
strcmp_loop:
    lb $t2, 0($t0)
    lb $t3, 0($t1)
    bne $t2, $t3, strcmp_diff
    beqz $t2, strcmp_equal
    addi $t0, $t0, 1
    addi $t1, $t1, 1
    j strcmp_loop

strcmp_diff:
    sub $v0, $t2, $t3
    jr $ra

strcmp_equal:
    li $v0, 0
    jr $ra
# ======================================
# Fun��o: strncmp = String N Comparator
# Descri��o: Compara at� n caracteres de duas strings
# Par�metros:
#   $a0 - endere�o da primeira string
#   $a1 - endere�o da segunda string
#   $a2 - n�mero m�ximo de caracteres a comparar
# Retorno:
#   $v0 - 0 (igual), negativo (str1 < str2), positivo (str1 > str2)
# ======================================
strncmp:
    li $v0, 0           # Inicializa retorno como 0 (igual)
    beqz $a2, strncmp_done # Se num=0, retorna 0 imediatamente
    
strncmp_loop:
    lb $t0, 0($a0)      # Carrega byte de str1
    lb $t1, 0($a1)      # Carrega byte de str2
    beqz $a2, strncmp_done # Se contador=0, termina
    beqz $t0, strncmp_check # Se fim de str1, verifica str2
    beqz $t1, strncmp_diff # Se fim de str2, strings diferem
    blt $t0, $t1, strncmp_neg # str1 < str2
    bgt $t0, $t1, strncmp_pos # str1 > str2
    addi $a0, $a0, 1    # Avan�a str1
    addi $a1, $a1, 1    # Avan�a str2
    addi $a2, $a2, -1   # Decrementa contador
    j strncmp_loop      # Continua compara��o
    
strncmp_check:
    beqz $t1, strncmp_done # Se str2 tamb�m terminou, s�o iguais
strncmp_neg:
    li $v0, -1          # Retorna -1
    jr $ra              
strncmp_pos:
    li $v0, 1           # Retorna 1
    jr $ra              
strncmp_diff:
    sub $v0, $t0, $t1   # Calcula diferen�a ASCII
strncmp_done:
    jr $ra              # Retorna ao chamador

# ======================================
# Fun��o: strcat = String Concatenator
# Descri��o: Concatena duas strings
# Par�metros:
#   $a0 - endere�o do destino
#   $a1 - endere�o da origem
# Retorno:
#   $v0 - endere�o original do destino
# ======================================
strcat:
    move $t0, $a0       # Salva endere�o original do destino
    
strcat_find_end:
    lb $t1, 0($t0)      # Carrega byte do destino
    beqz $t1, strcat_copy # Se NULL, inicia c�pia
    addi $t0, $t0, 1    # Avan�a no destino
    j strcat_find_end   # Continua procurando fim
    
strcat_copy:
    lb $t1, 0($a1)      # Carrega byte da origem
    sb $t1, 0($t0)      # Armazena no destino
    beqz $t1, strcat_done # Se NULL, termina
    addi $t0, $t0, 1    # Avan�a destino
    addi $a1, $a1, 1    # Avan�a origem
    j strcat_copy       # Continua c�pia
    
strcat_done:
    move $v0, $a0       # Retorna endere�o original
    jr $ra              # Retorna ao chamador


